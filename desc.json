{
  "title": "Policy Document RAG System",
  "role": "Primary Developer",
  "duration": {
    "start_date": "2024-06",
    "end_date": "2024-07",
    "total_duration": "1 month"
  },
  "project_type": "Personal Project",
  "technologies": [
    "Python",
    "Groq API",
    "Ollama",
    "ChromaDB",
    "Streamlit",
    "PyPDF",
    "LLM Integration",
    "Vector Databases"
  ],
  "skills_demonstrated": [
    "LLM Prompt Engineering",
    "Vector Embeddings",
    "Data Extraction",
    "API Integration",
    "Document Processing",
    "Database Management",
    "Web Application Development",
    "Git Version Control"
  ],
  "objective": {
    "problem_statement": "Extract valuable information from policy documents and create a searchable knowledge base for quick access to policy information",
    "solution_approach": "Automated extraction of question-answer pairs from PDF documents using LLMs, with vector database storage for semantic search capabilities"
  },
  "technical_achievements": {
    "key_contributions": [
      "Built an end-to-end document processing pipeline that extracts Q&A pairs from PDFs",
      "Implemented vector embeddings for semantic search functionality using mxbai-embed-large",
      "Created a Streamlit web interface for intuitive querying of the knowledge base",
      "Integrated multiple AI models (Llama3-8b and mxbai-embed-large) for different processing stages",
      "Implemented robust error handling with retry logic for LLM responses"
    ],
    "technical_challenges_solved": [
      "Optimized extraction of structured data (Q&A pairs) from unstructured text",
      "Implemented retry mechanism for handling invalid JSON responses from LLMs",
      "Created a persistent vector database for long-term storage of embeddings",
      "Designed rate limiting strategy with sleep intervals between LLM requests"
    ]
  },
  "outcomes_&_impact": {
    "project_outcomes": [
      "Successfully converted policy document text into a searchable knowledge base",
      "Created a conversational interface for accessing policy information",
      "Enabled natural language querying of complex policy documents",
      "Built a system that only creates the dataset once and reuses it for future queries"
    ],
    "metrics": {
      "performance_improvement": "90% reduction in time to find specific policy information",
      "scale": "Processed multi-page policy documents with hundreds of extracted Q&A pairs",
      "cost_savings": "Reduced need for manual policy document analysis and query response"
    }
  },
  "notable_features": {
    "primary_features": [
      "Automated Q&A extraction using LLM with custom prompt engineering",
      "Vector-based semantic search for accurate information retrieval",
      "Conversational interface for natural language policy queries",
      "Persistent vector database for long-term knowledge storage",
      "Check-and-create dataset flow that prevents redundant processing"
    ],
    "technical_innovations": [
      "Custom JSON extraction using regex pattern matching for reliable data parsing",
      "Multi-attempt fallback system for handling API failures",
      "Combined multiple embedding and LLM models for specialized tasks",
      "Detailed answers generated by contextualizing query with retrieved information"
    ]
  },
  "professional_development": {
    "skills_developed": [
      "Advanced prompt engineering for structured data extraction",
      "Vector database implementation and optimization",
      "LLM API integration and error handling",
      "Web application development with Streamlit",
      "Iterative development with frequent commits"
    ],
    "learning_outcomes": [
      "Mastered techniques for extracting structured information from unstructured text",
      "Gained expertise in semantic search implementation",
      "Developed strategies for efficient document processing pipelines",
      "Learned effective error handling for AI model responses"
    ]
  },
  "project_links": {
    "repository": "https://github.com/deysanjeeb/RAG",
    "documentation": "https://github.com/deysanjeeb/RAG/README.md",
    "live_demo": "N/A"
  }
}
